generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [btree_gin, pg_trgm]
}

model Entity {
  entityId               String       @id @default(dbgenerated("gen_random_uuid()")) @map("entity_id") @db.Uuid
  name                   String       @db.VarChar(255)
  type                   EntityType
  aliases                String[]     @default([])
  restaurantAttributes   String[]     @default([]) @map("restaurant_attributes") @db.Uuid
  restaurantQualityScore Decimal?     @default(0) @map("restaurant_quality_score") @db.Decimal(10, 4)
  generalPraiseUpvotes   Int          @default(0) @map("general_praise_upvotes")
  latitude               Decimal?     @db.Decimal(10, 8)
  longitude              Decimal?     @db.Decimal(11, 8)
  address                String?      @db.VarChar(500)
  googlePlaceId          String?      @unique @map("google_place_id") @db.VarChar(255)
  restaurantMetadata     Json         @default("{}") @map("restaurant_metadata")
  lastUpdated            DateTime     @default(now()) @map("last_updated")
  createdAt              DateTime     @default(now()) @map("created_at")
  foodConnections        Connection[] @relation("FoodEntity")
  restaurantConnections  Connection[] @relation("RestaurantEntity")

  @@unique([name, type])
  @@index([type], map: "idx_entities_type")
  @@index([type, restaurantQualityScore(sort: Desc)], map: "idx_entities_type_score")
  @@index([name], map: "idx_entities_name")
  @@index([aliases], map: "idx_entities_aliases")
  @@index([restaurantAttributes], map: "idx_entities_restaurant_attributes")
  @@index([longitude, latitude], map: "idx_entities_location")
  @@index([address], map: "idx_entities_address")
  @@index([googlePlaceId], map: "idx_entities_google_place_id")
  @@index([lastUpdated(sort: Desc)], map: "idx_entities_last_updated")
  @@index([createdAt(sort: Desc)], map: "idx_entities_created_at")
  @@map("entities")
}

model Connection {
  connectionId       String        @id @default(dbgenerated("gen_random_uuid()")) @map("connection_id") @db.Uuid
  restaurantId       String        @map("restaurant_id") @db.Uuid
  foodId             String        @map("food_id") @db.Uuid
  categories         String[]      @default([]) @db.Uuid
  foodAttributes     String[]      @default([]) @map("food_attributes") @db.Uuid
  mentionCount       Int           @default(0) @map("mention_count")
  totalUpvotes       Int           @default(0) @map("total_upvotes")
  recentMentionCount Int           @default(0) @map("recent_mention_count")
  lastMentionedAt    DateTime?     @map("last_mentioned_at")
  activityLevel      ActivityLevel @default(normal) @map("activity_level")
  foodQualityScore   Decimal       @default(0) @map("food_quality_score") @db.Decimal(10, 4)
  lastUpdated        DateTime      @default(now()) @map("last_updated")
  createdAt          DateTime      @default(now()) @map("created_at")
  food               Entity        @relation("FoodEntity", fields: [foodId], references: [entityId])
  restaurant         Entity        @relation("RestaurantEntity", fields: [restaurantId], references: [entityId])
  mentions           Mention[]

  @@unique([restaurantId, foodId, foodAttributes], map: "connections_restaurant_id_food_id_food_attribut_key")
  @@index([restaurantId], map: "idx_connections_restaurant")
  @@index([foodId], map: "idx_connections_food")
  @@index([categories], map: "idx_connections_categories_gin", type: Gin)
  @@index([foodAttributes], map: "idx_connections_attributes_gin", type: Gin)
  @@index([mentionCount(sort: Desc)], map: "idx_connections_mention_count")
  @@index([totalUpvotes(sort: Desc)], map: "idx_connections_total_upvotes")
  @@index([foodQualityScore(sort: Desc)], map: "idx_connections_quality_score")
  @@index([lastMentionedAt(sort: Desc)], map: "idx_connections_last_mentioned")
  @@index([activityLevel], map: "idx_connections_activity")
  @@index([restaurantId, foodQualityScore(sort: Desc)], map: "idx_connections_restaurant_quality")
  @@index([foodId, foodQualityScore(sort: Desc)], map: "idx_connections_food_quality")
  @@index([restaurantId, mentionCount(sort: Desc)], map: "idx_connections_restaurant_mentions")
  @@index([foodId, mentionCount(sort: Desc)], map: "idx_connections_food_mentions")
  @@index([lastUpdated(sort: Desc)], map: "idx_connections_last_updated")
  @@index([createdAt(sort: Desc)], map: "idx_connections_created_at")
  @@index([recentMentionCount(sort: Desc)], map: "idx_connections_recent_mentions")
  @@map("connections")
}

model Mention {
  mentionId      String        @id @default(dbgenerated("gen_random_uuid()")) @map("mention_id") @db.Uuid
  connectionId   String        @map("connection_id") @db.Uuid
  sourceType     MentionSource @map("source_type")
  sourceId       String        @map("source_id") @db.VarChar(255)
  sourceUrl      String        @map("source_url") @db.VarChar(500)
  subreddit      String        @db.VarChar(100)
  contentExcerpt String        @map("content_excerpt")
  author         String?       @db.VarChar(255)
  upvotes        Int           @default(0)
  createdAt      DateTime      @map("created_at")
  processedAt    DateTime      @default(now()) @map("processed_at")
  connection     Connection    @relation(fields: [connectionId], references: [connectionId])

  @@index([connectionId], map: "idx_mentions_connection")
  @@index([upvotes(sort: Desc)], map: "idx_mentions_upvotes")
  @@index([sourceType, sourceId], map: "idx_mentions_source")
  @@index([subreddit], map: "idx_mentions_subreddit")
  @@index([createdAt(sort: Desc)], map: "idx_mentions_created")
  @@index([processedAt(sort: Desc)], map: "idx_mentions_processed")
  @@index([author], map: "idx_mentions_author")
  @@index([subreddit, upvotes(sort: Desc)], map: "idx_mentions_subreddit_upvotes")
  @@index([sourceType, createdAt(sort: Desc)], map: "idx_mentions_source_type_created")
  @@map("mentions")
}

model RestaurantCategorySignal {
  restaurantId     String   @map("restaurant_id") @db.Uuid
  categoryId       String   @map("category_id") @db.Uuid
  mentionsCount    Int      @default(0) @map("mentions_count")
  totalUpvotes     Int      @default(0) @map("total_upvotes")
  lastMentionedAt  DateTime @map("last_mentioned_at")
  firstMentionedAt DateTime @default(now()) @map("first_mentioned_at")

  @@id([restaurantId, categoryId])
  @@index([categoryId], map: "idx_category_signal_category")
  @@index([restaurantId, totalUpvotes(sort: Desc)], map: "idx_category_signal_restaurant")
  @@map("restaurant_category_signals")
}

model User {
  userId             String             @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  email              String             @unique @db.VarChar(255)
  createdAt          DateTime           @default(now()) @map("created_at")
  trialStartedAt     DateTime?          @map("trial_started_at")
  trialEndsAt        DateTime?          @map("trial_ends_at")
  subscriptionStatus SubscriptionStatus @default(trialing) @map("subscription_status")
  stripeCustomerId   String?            @map("stripe_customer_id") @db.VarChar(255)
  referralCode       String?            @unique @map("referral_code") @db.VarChar(50)
  referredBy         String?            @map("referred_by") @db.Uuid
  subscriptions      Subscription[]
  events             UserEvent[]
  referrer           User?              @relation("UserReferrals", fields: [referredBy], references: [userId])
  referrals          User[]             @relation("UserReferrals")

  @@index([email], map: "idx_users_email")
  @@index([subscriptionStatus], map: "idx_users_subscription_status")
  @@index([createdAt(sort: Desc)], map: "idx_users_created_at")
  @@index([trialEndsAt], map: "idx_users_trial_ends_at")
  @@index([referralCode], map: "idx_users_referral_code")
  @@index([referredBy], map: "idx_users_referred_by")
  @@map("users")
}

model Subscription {
  subscriptionId       String             @id @default(dbgenerated("gen_random_uuid()")) @map("subscription_id") @db.Uuid
  userId               String             @map("user_id") @db.Uuid
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id") @db.VarChar(255)
  status               SubscriptionStatus
  currentPeriodStart   DateTime?          @map("current_period_start")
  currentPeriodEnd     DateTime?          @map("current_period_end")
  cancelAtPeriodEnd    Boolean            @default(false) @map("cancel_at_period_end")
  cancelledAt          DateTime?          @map("cancelled_at")
  createdAt            DateTime           @default(now()) @map("created_at")
  user                 User               @relation(fields: [userId], references: [userId])

  @@index([userId], map: "idx_subscriptions_user_id")
  @@index([status], map: "idx_subscriptions_status")
  @@index([currentPeriodEnd], map: "idx_subscriptions_period_end")
  @@index([stripeSubscriptionId], map: "idx_subscriptions_stripe_id")
  @@index([createdAt(sort: Desc)], map: "idx_subscriptions_created_at")
  @@map("subscriptions")
}

model UserEvent {
  eventId   String   @id @default(dbgenerated("gen_random_uuid()")) @map("event_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  eventType String   @map("event_type") @db.VarChar(50)
  eventData Json     @default("{}") @map("event_data")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [userId])

  @@index([userId], map: "idx_user_events_user_id")
  @@index([eventType], map: "idx_user_events_event_type")
  @@index([createdAt(sort: Desc)], map: "idx_user_events_created_at")
  @@index([userId, eventType], map: "idx_user_events_user_type")
  @@index([userId, createdAt(sort: Desc)], map: "idx_user_events_user_created")
  @@map("user_events")
}

model Subreddit {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String    @unique @db.VarChar(100)
  avgPostsPerDay   Float     @map("avg_posts_per_day")
  lastCalculated   DateTime  @map("last_calculated") @db.Timestamptz(6)
  lastProcessed    DateTime? @map("last_processed") @db.Timestamptz(6)
  isActive         Boolean   @default(true) @map("is_active")
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  safeIntervalDays Float     @map("safe_interval_days")

  @@index([name])
  @@index([isActive])
  @@index([lastProcessed])
  @@index([safeIntervalDays])
  @@map("subreddits")
}

enum EntityType {
  restaurant
  food
  food_attribute
  restaurant_attribute

  @@map("entity_type")
}

enum ActivityLevel {
  trending
  active
  normal

  @@map("activity_level")
}

enum SubscriptionStatus {
  trialing
  active
  cancelled
  expired

  @@map("subscription_status")
}

enum MentionSource {
  post
  comment

  @@map("mention_source")
}
